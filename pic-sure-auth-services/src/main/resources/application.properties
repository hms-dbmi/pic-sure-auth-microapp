# Application server port and context path
server.port=${SERVER_PORT:8090}
server.servlet.context-path=/auth

spring.datasource.url=${DATASOURCE_URL:jdbc:mysql://picsure-db:3306/auth?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&autoReconnectForPools=true&serverTimezone=UTC}
spring.datasource.username=${DATASOURCE_USERNAME:root}
spring.datasource.password=${DATASOURCE_PASSWORD:password}
# MySQL 8 driver
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# MySQL 5 driver
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# JPA/Hibernate properties
#spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#spring.jpa.hibernate.ddl-auto=create

# By default, hibernate will convert camelCase to snake_case for table and column names. This property disables that behavior.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Logging
logging.level.org.springframework.security=TRACE

# Mail session configuration (Assuming Gmail SMTP for example)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${EMAIL_ADDRESS:your_email@gmail.com}
spring.mail.password=${EMAIL_PASSWORD:your_email_password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Custom application properties
application.tos.enabled=${TOS_ENABLED:true}
application.default.uuid=${STACK_SPECIFIC_APPLICATION_ID:default_uuid}
application.system.name=${SYSTEM_NAME:PIC-SURE All-in-one}
application.template.path=${TEMPLATE_PATH:/config/}
application.access.grant.email.subject=${GRANT_EMAIL_SUBJECT:email_subject}
application.user.activation.reply.to=${USER_ACTIVATION_REPLY_TO:reply_to_email}
application.admin.users=${ADMIN_USERS:__ADMIN_USERS__}

# Fence Configurations. These are used to configure the access rules for the application.
# If you intend to use a fence_mapping.json file you will need to set the following properties.
fence.consent.group.concept.path=\\DCC Harmonized data set\\
fence.standard.access.rules=AR_ONLY_INFO,AR_ONLY_SEARCH,AR_INFO_COLUMN_LISTING
fence.allowed.query.types=COUNT,CROSS_COUNT,CATEGORICAL_CROSS_COUNT,CONTINUOUS_CROSS_COUNT,DATAFRAME
fence.harmonized.consent.group.concept.path=\\_harmonized_consent\\
fence.parent.consent.group.concept.path=\\_consents\\
fence.topmed.consent.group.concept.path=\\_topmed_consents\\
fence.variant.annotation.columns=Variant_consequence_calculated,Variant_class,Gene_with_variant,Variant_severity,Variant_frequency_in_gnomAD,Variant_frequency_as_text

# We have two different authorization flows. One is strict and the other is not strict.
# Strict requires both access rules and privilege rules to be present for the user.
strict.authorization.applications.connections=${STRICT_AUTHORIZATION_APPLICATIONS:OKTA,FENCE,OPEN}

# Application Token configurations.
# This configuration is used to generate a token for the application to access the PIC-SURE API.
application.client.secret=${APPLICATION_CLIENT_SECRET}
application.client.secret.base64=${APPLICATION_CLIENT_SECRET_IS_BASE_64:false}
application.user.id.claim=${USER_ID_CLAIM:sub}

# Token Expiration
# 1 hour in milliseconds
application.token.expiration.time=${TOKEN_EXPIRATION_TIME:3600000}

# 30 days in milliseconds
application.long.term.token.expiration.time=${LONG_TERM_TOKEN_EXPIRATION_TIME:2592000000}

# Open IDP configurations
open.idp.provider.is.enabled=${OPEN_IDP_PROVIDER_IS_ENABLED:false}

# OKTA configurations
a4.okta.idp.provider.is.enabled=${A4_OKTA_IDP_PROVIDER_IS_ENABLED:false}
a4.okta.client.id=${A4_OKTA_CLIENT_ID:false}
a4.okta.client.secret=${A4_OKTA_CLIENT_SECRET:false}
a4.okta.connection.id=${A4_OKTA_CONNECTION_ID:false}
a4.okta.idp.provider.uri=${A4_OKTA_IDP_PROVIDER_URI:false}

# Fence IDP configurations
fence.idp.provider.is.enabled=${FENCE_IDP_PROVIDER_IS_ENABLED:false}
fence.idp.provider.uri=${FENCE_IDP_PROVIDER_URI:false}
fence.client.id=${FENCE_CLIENT_ID:false}
fence.client.secret=${FENCE_CLIENT_SECRET:false}

# IDP Provider configurations
auth0.idp.provider.is.enabled=${AUTH0_IDP_PROVIDER_IS_ENABLED:false}
auth0.host=${AUTH0_HOST:false}
auth0.denied.email.enabled=${AUTH0_DENIED_EMAIL_ENABLED:false}

# RAS Provider configurations
ras.okta.idp.provider.is.enabled=${RAS_OKTA_IDP_PROVIDER_IS_ENABLED:false}
ras.okta.idp.provider.uri=${RAS_OKTA_IDP_PROVIDER_URI:false}
ras.okta.connection.id=${RAS_OKTA_CONNECTION_ID:false}
ras.okta.client.id=${RAS_OKTA_CLIENT_ID:false}
ras.okta.client.secret=${RAS_OKTA_CLIENT_SECRET:false}

server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=true